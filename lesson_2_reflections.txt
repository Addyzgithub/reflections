Q1: What happens when you initialize a repository? Why do you need to do it?

A: Git creates a hidden directory in current working directory which contains the meta-data needed for version controlling.
This is necessary to tell git we want to start tracking of some of/all the files in that directory and its sub-directories.

Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: Staging area is an intermediate temporary state of our commit before we save it to our repository.
This allows us to define which files we want to include in the commit and also the message of commit which summarizes the logic behind the commit.

Q3: How can you use the staging area to make sure you have one commit per logical change?

A: For this purpose we can use git diff command to get the difference between the data in the files currently in staging area and the working directory.
Then we can use git diff --staged command to see the difference between the data in the files currently in staging area and the latest commit.

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: When making experimental changes to the code or testing a new feature whose working we are not sure about.
Making such branches can help us keep our working model of code safe from the mess we might create while testing or experimenting changes to the code.
Also it maintains the version controlling and we can merge the changes to our main branch easily once we are sure that our new code works as desired.

Q5: How do the diagrams help you visualize the branch structure?

A: Diagrams show us a tree of commits our code has been through. Also they show us branches that might have been made other than current branch.

Q6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: Merging allows us to combine the changes we did in one branch to those we made in other branch. It essentially creates a new commit combining these changes and makes it the tip of the current checked-out branch. Thus this commit has 2 parents and we can access any of them with this new commit. Also due to this, the sub-branch name is no longer needed and hence can be safely deleted.

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A: Automatic merging is very much time and effort-saving tool, however, if the two copies of files have the code changed in the similar area of program, automatic merging fails and asks for resolving the conflicts.
As opposed to that, manually merging will not cause any such conflicts as we will already know which change to keep and which not, but it will be very much time and effor-consuming to merge the codes in two states of the program.